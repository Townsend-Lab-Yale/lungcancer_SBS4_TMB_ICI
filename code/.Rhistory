#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 0.4561 on 1257 degrees of freedom
# Multiple R-squared:  0.2485,	Adjusted R-squared:  0.2479
# F-statistic: 415.6 on 1 and 1257 DF,  p-value: < 2.2e-16
ggplot(data = tmb_table_wes_biologWei_v2, aes(x = SBS4, y = log10TMB)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(
x = "Proportion of mutations
attributed to SBS4 signature",
y = expression(Log[10] ~ "of tumor mutation burden")
) +
theme_classic() +
theme(
axis.text.x = element_text(size = 18, face = "bold"),
axis.text.y = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 18, face = "bold")
)
#### Fig2B use 50 SNV as the cutoff, as samples with < 50 SNV are not qualified for signature analysis ####
lm_result_v2_filter <- lm(
log10TMB ~ SBS4,
data = tmb_table_wes_biologWei_v2[TMB > 50 / exome_size_mb]
)
summary(lm_result_v2_filter) ## slope is 0.9462, the P-value is <2.2e-16
p_SBS4_TMB <- ggplot(
data = tmb_table_wes_biologWei_v2[TMB > 50 / exome_size_mb],
aes(x = SBS4, y = log10TMB)
) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(
x = "       Proportion of mutations
attributed to SBS4 signature",
y = expression(Log[10] ~ "of tumor mutation burden")
) +
theme_classic() +
theme(
axis.text.x = element_text(size = 18, face = "bold"),
axis.text.y = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
axis.title.x = element_text(
size = 18,
face = "bold",
vjust = 0.5,
hjust = 0.5
)
) +
scale_y_continuous(
limits = c(0, 2.0),
expand = expansion(mult = c(0, 0.05))
) +
scale_x_continuous(limits = c(0, 1), expand = expansion(mult = c(0.05, 0)))
ggsave(file = "p_SBS4_TMB_v2.svg", plot = p_SBS4_TMB)
p_SBS4_TMB
save.image()
ggsave(file = "p_SBS4_TMB.svg", plot = p_SBS4_TMB)
### V2: Smoking status here was determined by clinical record for WES/WGS/TGS data####
# clin_df = fread(paste0(location_output,'merged_luad_clinical.txt'))
# head(clin_df)
dim(clin_df)
### V2: Smoking status here was determined by clinical record for WES/WGS/TGS data####
clin_df = fread(paste0(location_output,'merged_luad_clinical.txt'))
# head(clin_df)
dim(clin_df)
table(clin_df$Smoker, exclude = NULL)
# FALSE  TRUE  <NA>
#   790  1026  8068
summary(clin_df$`Progression Free Survival (months)`)
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
#   0.000   2.360   6.475  10.841  16.570  63.270    9492
clin_df_sampleInfo <- inner_join(
clin_df,
cesa$samples,
by = c("Sample ID" = "Unique_Patient_Identifier")
)
dim(clin_df_sampleInfo) ## 9230, 15
table(clin_df_sampleInfo$Smoker, clin_df_sampleInfo$coverage, exclude = NULL)
dim(sample_G12C_sta) ## 9457, 3
dim(sample_G12C_sta_addBioWei) ## 9228, 84
## add G12_status
clin_df_sampleInfo <- inner_join(
clin_df_sampleInfo,
sample_G12C_sta,
by = c("Sample ID" = "Unique_Patient_Identifier")
)
head(integrated_lungCancer_maf_sample)
# exome genome targeted
# FALSE   430    188      162
# TRUE    691     21      307
# <NA>    138      1     7292
sample_G12C_sta <- unique(integrated_lungCancer_maf_sample[, .(
Unique_Patient_Identifier,
G12C_sta,
#smoking_sta,
coverage
)])
integrated_lungCancer_maf_sample[,
G12C_sta := ifelse(top_consequence %in% "KRAS_G12C", "G12C", "No_G12C")
]
sample_G12C_sta <- unique(integrated_lungCancer_maf_sample[, .(
Unique_Patient_Identifier,
G12C_sta,
#smoking_sta,
coverage
)])
dim(sample_G12C_sta) ## 9457, 3
## add G12_status
clin_df_sampleInfo <- inner_join(
clin_df_sampleInfo,
sample_G12C_sta,
by = c("Sample ID" = "Unique_Patient_Identifier")
)
head(clin_df_sampleInfo)
head(clin_df_sampleInfo)
setnames(
clin_df_sampleInfo,
old = "smoking_sta",
new = "smoking_sta_bySBS4_and_cliniData"
)
setnames(
clin_df_sampleInfo,
old = "Smoker",
new = "smoking_sta_byCliniDataOnly"
)
contingency_table_byCliniData <- table(
clin_df_sampleInfo$smoking_sta_byCliniDataOnly,
clin_df_sampleInfo$G12C_sta
)
# G12C No_G12C
# FALSE   20     760
# TRUE   161     858
print(contingency_table_byCliniData)
contingency_table_byCliniData
dimnames(contingency_table_byCliniData) = list(
c("Never-Smoker", "Smoker"),
c("G12C", "No_G12C")
) ## rename the contigenct_table
chisq_result_byCliniData <- chisq.test(contingency_table_byCliniData)
print(chisq_result_byCliniData)
table(
clin_df_sampleInfo$smoking_sta_byCliniDataOnly,
clin_df_sampleInfo$G12C_sta,
clin_df_sampleInfo$coverage
)
table(
KRAS_mut_tar_sample_biologWei[
(!coverage %in% c("targeted")),
.(top_consequence, coverage)
],
exclude = NULL
)
# use real SBS4 data
nrow(KRAS_mut_tar_sample_biologWei[(!coverage %in% c("targeted"))]) ## 262 sample
nrow(KRAS_mut_tar_sample_biologWei[(coverage %in% c("targeted"))]) ## 2342 panel sample
#                 coverage
# top_consequence exome genome
# KRAS_G12D    36      8
# KRAS_G12C   119      6
# KRAS_G12V    64      3
# KRAS_G12A    24      2
SBS4_G12C <- KRAS_mut_tar_sample_biologWei[
(!coverage %in% c("targeted")) & (top_consequence %in% "KRAS_G12C"),
SBS4
]
SBS4_G12D <- KRAS_mut_tar_sample_biologWei[
(!coverage %in% c("targeted")) & (top_consequence %in% "KRAS_G12D"),
SBS4
]
# Create data frames
df_G12C <- data.frame(
SBS4 = SBS4_G12C,
KRAS_variant = "G12C"
)
df_G12D <- data.frame(
SBS4 = SBS4_G12D,
KRAS_variant = "G12D"
)
# Combine them
df_all <- rbind(df_G12C, df_G12D)
# Predict log10TMB and IO response
df_all$log10TMB <- predict_log10TMB(df_all$SBS4)
## check the real TMB of G12C/G12D samples
head(KRAS_mut_tar_sample_biologWei)
head(tmb_table_wes_v2)
KRAS_mut_tar_sample_biologWei_TMB_wes_v2 <- inner_join(
KRAS_mut_tar_sample_biologWei,
tmb_table_wes_v2,
by = c("Unique_Patient_Identifier" = "Tumor_Sample_Barcode")
)
summary(
KRAS_mut_tar_sample_biologWei_TMB_wes_v2[
top_consequence %in% c("KRAS_G12C", "KRAS_G12D")
]$TMB
)
# df_all$IO_response_prob_zTMB <- predict_IO_response_zTMB(df_all$log10TMB)
# df_all$IO_response_prob_TMB <- predict_IO_response_TMB(df_all$log10TMB)
df_all$IO_response_prob_TMB_plateau <- 0.6 *
predict_IO_response_TMB(df_all$log10TMB) ## add 0.6 here to
predict_IO_response_TMB <- function(log10TMB) {
1 / (1 + exp(-(a0_TMB + a1 * (10^log10TMB)))) ## probability form of logistic model is : 1/(1+exp(-(a0+a1*x))) ## x for Litchfield et al is Z_TMB
}
# 1. Define the regression coefficients from SBS4 to log10(TMB)
b0 <- coef(lm_result_v2_filter)[1] ## intercept_from_your_regression  # e.g., -1
b1 <- coef(lm_result_v2_filter)[2] ## slope_from_your_regression      # e.g., 2
predict_log10TMB <- function(SBS4) {
b0 + b1 * SBS4
}
b0 <- coef(lm_result_v2_filter)[1] ## intercept_from_your_regression  # e.g., -1
b1 <- coef(lm_result_v2_filter)[2] ## slope_from_your_regression      # e.g., 2
predict_log10TMB <- function(SBS4) {
b0 + b1 * SBS4
}
# 2. Define parameters for the logistic model
OR <- 1.7
p0_TMB <- 0.03 ## 0.03 or 0.05 is more reasonable
a1 <- log(OR) ## 0.5306
a0_TMB <- log(p0_TMB / (1 - p0_TMB)) ## -2.19 for p0 <- 0.1
# Define a function to predict IO response probability from log10(TMB)
# (Assume a simple logistic model for now)
predict_IO_response_TMB <- function(log10TMB) {
1 / (1 + exp(-(a0_TMB + a1 * (10^log10TMB)))) ## probability form of logistic model is : 1/(1+exp(-(a0+a1*x))) ## x for Litchfield et al is Z_TMB
}
# Predict log10TMB and IO response
df_all$log10TMB <- predict_log10TMB(df_all$SBS4)
df_all$TMB <- 10^(df_all$log10TMB)
# df_all$IO_response_prob_zTMB <- predict_IO_response_zTMB(df_all$log10TMB)
# df_all$IO_response_prob_TMB <- predict_IO_response_TMB(df_all$log10TMB)
df_all$IO_response_prob_TMB_plateau <- 0.6 *
predict_IO_response_TMB(df_all$log10TMB) ## add 0.6 here to
### Samstein， four-parameter logistic (4PL) model####
TMB_hazardRatio <- fread(file = "TMB_HazardRatio_Data.csv")
### Samstein， four-parameter logistic (4PL) model####
TMB_hazardRatio <- fread(file = "TMB_HazardRatio_Data.csv")
colnames(TMB_hazardRatio) <- c("TMB", "HR")
#### fit the curve with the data, here use a four-parameter logistic (4PL) curve, common in dose-response:HR(TMB) = d+ (a-d)/(1+(TMB/c)^b)
# a = upper asymptote (~1)
# d = lower asymptote (~0.5 or lower)
# c = inflection point (TMB cutoff at half-max effect)
# b = slope (Hill coefficient)
# install.packages("drc")
library(drc)
model <- drm(HR ~ TMB, fct = LL.4(), data = TMB_hazardRatio)
summary(model)
# b:(Intercept) 2.3466487  0.1992005  11.780 < 2.2e-16 ***
#   c:(Intercept) 0.3561694  0.0059638  59.722 < 2.2e-16 ***
#   d:(Intercept) 1.0111100  0.0498118  20.299 < 2.2e-16 ***
#   e:(Intercept) 7.8421479  0.5458201  14.368 < 2.2e-16 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error:
#
#   0.02466389 (99 degrees of freedom)
predict_HR_TMB <- function(TMB) {
c + (d - c) / (1 + (TMB / e)^b) ## probability form of logistic model is : 1/(1+exp(-(a0+a1*x))) ## x for Litchfield et al is Z_TMB
}
params <- coef(model)
b <- params["b:(Intercept)"]
c <- params["c:(Intercept)"]
d <- params["d:(Intercept)"]
e <- params["e:(Intercept)"]
df_all$HR_TMB <- predict_HR_TMB(df_all$TMB)
## already have the function: use a black line instead of points
# Define the RR(SBS4) function
RR_from_SBS4 <- function(SBS4) {
TMB <- 10^(0.513 + 0.946 * SBS4)
RR <- 0.6 * (1 / (1 + exp(-(-3.476 + 0.531 * TMB))))
return(RR)
}
# Create a data frame with a sequence of SBS4 values
sbs4_seq <- seq(0, 1, length.out = 200)
df_RR <- data.frame(
SBS4 = sbs4_seq,
RR = RR_from_SBS4(sbs4_seq)
)
df_all$KRAS_variant <- factor(df_all$KRAS_variant, levels = c("G12C", "G12D"))
setorder(df_all, KRAS_variant)
### add two short vertical lines at the median SBS4 for KRAS G12C and KRAS G12D to highlight them
df_all <- as.data.table(df_all)
median_G12C <- median(df_all$SBS4[df_all$KRAS_variant == "G12C"], na.rm = TRUE)
median_G12D <- median(df_all$SBS4[df_all$KRAS_variant == "G12D"], na.rm = TRUE)
##### update the plot for RR-SBS4 and HR-SBS4: use points in the original curve; add short vertical lines below the curve to show the distributions; add circle in x and y axis to show the median values of SBS4 and HR/RR ####
RR_median_G12C <- median(df_all[
KRAS_variant == "G12C",
IO_response_prob_TMB_plateau
])
RR_median_G12D <- median(df_all[
KRAS_variant == "G12D",
IO_response_prob_TMB_plateau
])
HR_median_G12C <- median(df_all[KRAS_variant == "G12C", HR_TMB])
HR_median_G12D <- median(df_all[KRAS_variant == "G12D", HR_TMB])
## already have the function: use a black line instead of points
# Define the RR(SBS4) function
RR_from_SBS4 <- function(SBS4) {
TMB <- 10^(0.513 + 0.946 * SBS4)
RR <- 0.6 * (1 / (1 + exp(-(-3.476 + 0.531 * TMB))))
return(RR)
}
# Create a data frame with a sequence of SBS4 values
sbs4_seq <- seq(0, 1, length.out = 200)
df_RR <- data.frame(
SBS4 = sbs4_seq,
RR = RR_from_SBS4(sbs4_seq)
)
p_RR_SBS4_line_point_blackline <- ggplot() +
#geom_point(alpha = 0.2, size = 0.5) +   # individual points
# geom_smooth(method = "loess", se = FALSE, size = 1) +  # trend line
#geom_smooth(method = "loess", se = FALSE, size = 0.5, alpha = 0.3, aes(color = KRAS_variant), linetype = "dashed" ) +  # trend line
geom_line(data = df_RR, aes(x = SBS4, y = RR), color = "black", size = 2) +
scale_y_continuous(
limits = c(0, 1),
expand = c(0, 0),
breaks = c(0, 0.25, 0.5, 0.75, 1)
) +
scale_x_continuous(
limits = c(0, 1),
expand = c(0, 0),
breaks = c(0.25, 0.5, 0.75, 1)
) +
#geom_point( shape =21, color = "black", size = 5, aes(fill = KRAS_variant), position = position_jitter(), alpha = 0.6) +   # width = 0.01, height = 0.01;individual points alpha = 0.2, position = position_jitter(),
# dashed lines connecting medians to axes
geom_segment(
data = df_all,
aes(x = median_G12C, xend = median_G12C, y = 0, yend = RR_median_G12C),
linetype = "dashed",
color = "#F8766D"
) +
geom_segment(
data = df_all,
aes(x = 0, xend = median_G12C, y = RR_median_G12C, yend = RR_median_G12C),
linetype = "dashed",
color = "#F8766D"
) +
geom_segment(
data = df_all,
aes(x = median_G12D, xend = median_G12D, y = 0, yend = RR_median_G12D),
linetype = "dashed",
color = "#00BFC4"
) +
geom_segment(
data = df_all,
aes(x = 0, xend = median_G12D, y = RR_median_G12D, yend = RR_median_G12D),
linetype = "dashed",
color = "#00BFC4"
) +
geom_segment(
data = df_all,
aes(x = SBS4, y = 0.03, yend = 0.03 + 0.04, color = KRAS_variant),
size = 0.5,
alpha = 0.7
) +
# annotate("text", x = median_G12C,  y = y_start_median_G12C_IO - 0.01,  label = "*", color = "#F8766D", size = 8) +  # yend = y_end_median_G12C_IO,
# annotate("text", x = median_G12D, y = y_start_median_G12D_IO - 0.01,  label = "*", color = "#00BFC4", size = 8) +  # yend = y_end_median_G12D_IO,
theme_classic() +
labs(
x = "       Proportion of mutations
attributed to SBS4 signature",
y = "Objective response rate", ## Predicted IO probability
color = "KRAS Variant",
#title = "Predicted IO response vs. Tobacco mutagenesis (SBS4)"
) +
theme(
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
legend.position = c(0.75, 0.2),
# legend.justification = c(0.5,0) ## # center the legend horizontally
axis.text.x = element_text(size = 18, face = "bold"),
axis.text.y = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 18, face = "bold")
)
p_RR_SBS4_line_point_blackline
# Define the HR(SBS4) function
HR_from_SBS4 <- function(SBS4) {
TMB <- 10^(0.513 + 0.946 * SBS4)
HR <- 0.356 + (1.011 - 0.356) / (1 + (TMB / 7.84)^2.35)
return(HR)
}
# Create a data frame with a sequence of SBS4 values
sbs4_seq <- seq(0, 1, length.out = 200)
df_HR <- data.frame(
SBS4 = sbs4_seq,
HR = HR_from_SBS4(sbs4_seq)
)
p_HR_SBS4_line_point_blackline <- ggplot() +
geom_line(data = df_HR, aes(x = SBS4, y = HR), color = "black", size = 2) +
scale_x_continuous(
limits = c(0, 1),
expand = c(0, 0),
breaks = c(0.25, 0.5, 0.75, 1)
) +
scale_y_continuous(
limits = c(0, 1),
expand = c(0, 0),
breaks = c(0, 0.25, 0.5, 0.75, 1)
) +
# geom_point( shape =21, color = "black", size = 5, aes(fill = KRAS_variant), position = position_jitter(), alpha = 0.6) +   # width = 0.01, height = 0.01;individual points alpha = 0.2, position = position_jitter(),
geom_segment(
data = df_all,
aes(x = median_G12C, xend = median_G12C, y = 0, yend = HR_median_G12C),
linetype = "dashed",
color = "#F8766D"
) +
geom_segment(
data = df_all,
aes(x = 0, xend = median_G12C, y = HR_median_G12C, yend = HR_median_G12C),
linetype = "dashed",
color = "#F8766D"
) +
geom_segment(
data = df_all,
aes(x = median_G12D, xend = median_G12D, y = 0, yend = HR_median_G12D),
linetype = "dashed",
color = "#00BFC4"
) +
geom_segment(
data = df_all,
aes(x = 0, xend = median_G12D, y = HR_median_G12D, yend = HR_median_G12D),
linetype = "dashed",
color = "#00BFC4"
) +
geom_segment(
data = df_all,
aes(x = SBS4, y = 0.03, yend = 0.03 + 0.04, color = KRAS_variant),
size = 0.5,
alpha = 0.7
) +
#annotate("text", x = median_G12C,  y = y_start_median_G12C - 0.01,  label = "*", color = "#F8766D", size = 8) +  # yend = y_end_median_G12C_IO,
#annotate("text", x = median_G12D, y = y_start_median_G12D - 0.01,  label = "*", color = "#00BFC4", size = 8) +  # yend = y_end_median_G12D_IO,
theme_classic() +
labs(
x = "       Proportion of mutations
attributed to SBS4 signature",
y = "Hazard ratio", ## Predicted hazard ratio
color = "KRAS Variant" #,
#title = "Predicted hazard ratio vs. Tobacco mutagenesis (SBS4)"
) +
theme(
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
legend.position = c(0.75, 0.2),
# legend.justification = c(0.5,0) ## # center the legend horizontally
axis.text.x = element_text(size = 18, face = "bold"),
axis.text.y = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 18, face = "bold")
)
p_HR_SBS4_line_point_blackline
ggsave(file = "p_HR_SBS4.svg", plot = p_HR_SBS4_line_point_blackline)
ggsave(file = "p_RR_SBS4.svg", plot = p_RR_SBS4_line_point_blackline)
ggplot(
data = tmb_table_wes_biologWei_v2[TMB > 50 / exome_size_mb],
aes(x = SBS4, y = log10TMB)
) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(
x = "       Proportion of mutations
attributed to SBS4 signature",
y = bquote(bold(Log[10] ~ "of tumor mutation burden"))##expression(Log[10] ~ "of tumor mutation burden")
) +
theme_classic() +
theme(
axis.text.x = element_text(size = 18, face = "bold"),
axis.text.y = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
axis.title.x = element_text(
size = 18,
face = "bold",
vjust = 0.5,
hjust = 0.5
)
) +
scale_y_continuous(
limits = c(0, 2.0),
expand = expansion(mult = c(0, 0.05))
) +
scale_x_continuous(limits = c(0, 1), expand = expansion(mult = c(0.05, 0)))
p_SBS4_TMB <- ggplot(
data = tmb_table_wes_biologWei_v2[TMB > 50 / exome_size_mb],
aes(x = SBS4, y = log10TMB)
) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(
x = "       Proportion of mutations
attributed to SBS4 signature",
y = bquote(bold(Log[10] ~ "of tumor mutation burden"))
) +
theme_classic() +
theme(
axis.text.x = element_text(size = 18, face = "bold"),
axis.text.y = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
axis.title.x = element_text(
size = 18,
face = "bold",
vjust = 0.5,
hjust = 0.5
)
) +
scale_y_continuous(
limits = c(0, 2.0),
expand = expansion(mult = c(0, 0.05))
) +
scale_x_continuous(limits = c(0, 1), expand = expansion(mult = c(0.05, 0)))
ggsave(file = "p_SBS4_TMB.svg", plot = p_SBS4_TMB)
ggsave(file = "p_SBS4_TMB.svg", plot = p_SBS4_TMB)
save.image()
